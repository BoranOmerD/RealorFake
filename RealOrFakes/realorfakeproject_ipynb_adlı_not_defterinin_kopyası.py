# -*- coding: utf-8 -*-
"""RealorFakeProject.ipynb adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1comMTTo15LJuSHPLGdutRFOPHoW5m-6K

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import precision_recall_fscore_support

"""My Dataset:
id,title,author,text,label

0:Real
1:Fake




"""

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data Pre-processing"""

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.isnull().sum()

news_dataset = news_dataset.fillna('')

news_dataset['merged'] = news_dataset['author']+' '+news_dataset['title']

X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

ps = PorterStemmer()

def stemming(merged):
    stemmed_merged = re.sub('[^a-zA-Z]',' ',merged)
    stemmed_merged = stemmed_merged.lower()
    stemmed_merged = stemmed_merged.split()
    stemmed_merged = [ps.stem(word) for word in stemmed_merged if not word in stopwords.words('english')]
    stemmed_merged = ' '.join(stemmed_merged)
    return stemmed_merged

news_dataset['merged'] = news_dataset['merged'].apply(stemming)

X = news_dataset['merged'].values
Y = news_dataset['label'].values

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""Training the Model: Naive Bayes


"""

nb_model = MultinomialNB()

nb_model.fit(X_train, Y_train)

nb_model.fit(X_train, Y_train)

"""Naive Bayes Training Data"""

nb_train_prediction = nb_model.predict(X_train)
nb_training_data_accuracy = accuracy_score(nb_train_prediction, Y_train)

print('Naive Bayes - Accuracy score of the training data:', nb_training_data_accuracy)

"""Naive Bayes Test Data"""

nb_test_prediction = nb_model.predict(X_test)
nb_test_data_accuracy = accuracy_score(nb_test_prediction, Y_test)
print('Naive Bayes - Accuracy score of the test data:', nb_test_data_accuracy)

svm_model = SVC()
svm_model.fit(X_train, Y_train)

"""SVM Training Data"""

svm_train_prediction = svm_model.predict(X_train)
svm_training_data_accuracy = accuracy_score(svm_train_prediction, Y_train)
print('SVM - Accuracy score of the training data:', svm_training_data_accuracy)

"""SVM Test Data"""

svm_test_prediction = svm_model.predict(X_test)
svm_test_data_accuracy = accuracy_score(svm_test_prediction, Y_test)
print('SVM - Accuracy score of the test data:', svm_test_data_accuracy)

accuracy_scores = [nb_training_data_accuracy, nb_test_data_accuracy, svm_training_data_accuracy, svm_test_data_accuracy]

labels = ['Naive Bayes Training', 'Naive Bayes Test', 'SVM Training', 'SVM Test']

# Plot the bar chart
plt.figure(figsize=(10, 6))
plt.bar(labels, accuracy_scores, color=['blue', 'orange', 'green', 'red'])
plt.title('Accuracy Scores of Naive Bayes and SVM')
plt.xlabel('Models')
plt.ylabel('Accuracy Score')
plt.ylim(0.8, 1)  # Set y-axis limits for better visualization
plt.show()

accuracy_scores = [nb_training_data_accuracy, nb_test_data_accuracy, svm_training_data_accuracy, svm_test_data_accuracy]

plt.figure(figsize=(10, 6))
plt.plot(labels, accuracy_scores, marker='o', linestyle='-')
plt.title('Accuracy Scores of Naive Bayes and SVM')
plt.xlabel('Models')
plt.ylabel('Accuracy Score')
plt.ylim(0.8, 1)  # Set y-axis limits for better visualization
plt.grid(True)  # Add grid for better readability
plt.legend(['Accuracy Score'], loc='lower right')
plt.show()